<?php

/**
 * @file
 * File: Domain_registration module.
 *
 * Restricts registration to a particular email domain.
 */

/**
 * Implements hook_menu().
 */
function email_domain_restriction_menu() {
  $items['admin/config/people/email_domain_restriction'] = array(
    'title' => 'Email domain restriction',
    'description' => 'Allows or deny email domains',
  );
  return $items;
}

/**
 * Implements hook_form_form_id_form_alter().
 */
function email_domain_restriction_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'email_domain_restriction_email_domain_validate';
}


/**
 * Implements hook_form_form_id_form_alter().
 */
function email_domain_restriction_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('email_domain_restriction.settings');
  $apply_existing_email = $config->get('email_domain_restriction_apply_current_fields');
  if ($apply_existing_email == 1) {
    $form['#validate'][] = 'email_domain_restriction_email_domain_validate';
  }
}

/**
 * Implements hook_user_login().
 */
function email_domain_restriction_user_login($account) {
  $config = \Drupal::config('email_domain_restriction.settings');
  $apply_existing_email = $config->get('email_domain_restriction_apply_current_fields');
  if ($apply_existing_email == 1) {
    $email = $account->getEmail();
    $validation = email_domain_restriction_validate_email(array($email));
    if ($validation == FALSE) {
      $message = $config->get('email_domain_restriction_message_to_change');
      drupal_set_message(t($message), 'warning');
    }
  }
}

/**
 * Custom validation function.
 */
function email_domain_restriction_email_domain_validate($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $config = \Drupal::config('email_domain_restriction.settings');
  $email = $form_state->getValue('mail');
  $validation = email_domain_restriction_validate_email(array($email));
  if ($validation == FALSE) {
    $form_state->setErrorByName('mail', $config->get('email_domain_restriction_message'));
  }
}

/**
 * Check if the email domain is in the list.
 *
 * It accept an array of email as parameter. It can be used in other form.
 *
 * @param array $emails
 *   Email to check.
 *
 * @return bool
 *   FALSE if not passed, TRUE if passed.
 */
function email_domain_restriction_validate_email(array $emails) {
  if (!empty($emails)) {
    $emails_array = array();
    foreach ($emails as $email) {
      $email = explode('@', $email);
      $emails_array[] = strtolower($email[1]);
    }
  }
  else {
    return FALSE;
  }
  $config = \Drupal::config('email_domain_restriction.settings');
  $domains_list = $config->get('email_domain_restriction_domains');
  $domains_list = $domains_list != '' ? explode("\r\n", $domains_list) : array();
  var_dump($domains_list);
  $behaviour = $config->get('email_domain_restriction_behaviour');
  if ($behaviour == 0) {
    foreach ($emails_array as $email) {
      if (in_array($email, $domains_list)) {
        return FALSE;
      }
    }
  }
  else {
    foreach ($emails_array as $email) {
      if (!in_array($email, $domains_list)) {
        return FALSE;
      }
    }
  }
  return TRUE;
}
